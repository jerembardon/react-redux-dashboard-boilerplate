{"ast":null,"code":"import _classCallCheck from \"/Users/j.bardon/Desktop/Test/reactapp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/j.bardon/Desktop/Test/reactapp/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/j.bardon/Desktop/Test/reactapp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/j.bardon/Desktop/Test/reactapp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/j.bardon/Desktop/Test/reactapp/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/j.bardon/Desktop/Test/reactapp/client/src/components/Errors/errors.jsx\";\nimport React, { Component } from \"react\";\nimport { resetError } from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\n\nvar Errors =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Errors, _Component);\n\n  function Errors() {\n    _classCallCheck(this, Errors);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Errors).apply(this, arguments));\n  }\n\n  _createClass(Errors, [{\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps) {\n      if (this.props.location !== nextProps.location) {\n        this.props.resetError();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.error) {\n        return React.createElement(\"div\", {\n          className: \"alert alert-danger\",\n          role: \"alert\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, this.props.error));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Errors;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    error: state.errors.message\n  };\n};\n\nvar mapDispatchToProps = {\n  resetError: resetError // will be wrapped into a dispatch call\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Errors);","map":{"version":3,"sources":["/Users/j.bardon/Desktop/Test/reactapp/client/src/components/Errors/errors.jsx"],"names":["React","Component","resetError","connect","Errors","nextProps","props","location","error","mapStateToProps","state","errors","message","mapDispatchToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;IAEMC,M;;;;;;;;;;;;;wCACgBC,S,EAAW;AAC7B,UAAI,KAAKC,KAAL,CAAWC,QAAX,KAAwBF,SAAS,CAACE,QAAtC,EAAgD;AAC9C,aAAKD,KAAL,CAAWJ,UAAX;AACD;AACF;;;6BAEQ;AACP,UAAI,KAAKI,KAAL,CAAWE,KAAf,EAAsB;AACpB,eACE;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAoC,UAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,KAAKF,KAAL,CAAWE,KAAf,CADF,CADF;AAKD,OAND,MAMO;AACL,eAAO,IAAP;AACD;AACF;;;;EAjBkBP,S;;AAoBrB,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLF,IAAAA,KAAK,EAAEE,KAAK,CAACC,MAAN,CAAaC;AADf,GAAP;AAGD,CAJD;;AAMA,IAAMC,kBAAkB,GAAG;AACzBX,EAAAA,UAAU,EAAVA,UADyB,CACd;;AADc,CAA3B;AAIA,eAAeC,OAAO,CACpBM,eADoB,EAEpBI,kBAFoB,CAAP,CAGbT,MAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { resetError } from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\n\nclass Errors extends Component {\n  componentWillUpdate(nextProps) {\n    if (this.props.location !== nextProps.location) {\n      this.props.resetError();\n    }\n  }\n\n  render() {\n    if (this.props.error) {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          <p>{this.props.error}</p>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    error: state.errors.message\n  };\n};\n\nconst mapDispatchToProps = {\n  resetError // will be wrapped into a dispatch call\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Errors);\n"]},"metadata":{},"sourceType":"module"}